<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>const int process_count = 3;

typedef int[0,process_count-1] id_t;
typedef int time_t;

const time_t INF = 32767;

const int n = process_count;

const time_t xi = 80; // rho is the max drift of the physical clock; xi is 1/rho
const time_t delta = 2; // mean transfer delay of messages
const time_t epsilon = 1; // max deviation of transfer delay of messages
const time_t P = 22; // time after which the clock must be resynchronized
const time_t beta = 6; // maximal allowed difference between the synchronized clocks

const time_t gamma = beta + epsilon + (7 * beta + 3 * delta + 7 * epsilon) / xi + 8 * (beta + delta + epsilon) / (xi * xi) + 4 * (beta + delta + epsilon) / (xi * xi * xi);
const time_t cycle = (1+xi)*(beta+delta+epsilon)/xi;

typedef int[-P+cycle/2+delta, cycle] cycle_t;

urgent chan send[id_t];
chan receive[id_t][id_t];

time_t local_time[id_t];
int[-1, 2] diff[id_t];
bool b[id_t][id_t];

time_t min(time_t x, time_t y)
{
    return x &lt; y ? x : y;
}

time_t max(time_t x, time_t y)
{
    return x &gt; y ? x : y;
}

time_t abs(time_t x)
{
    if(x &lt; 0)
       return -x;
    else
       return x;
}

void increment_diff(const id_t id)
{
    int[-2, 2] max = -2;
    int[-2, 1] corr;

    for(i : id_t)
    {
        if(i == id)
            diff[i]++;

        if(diff[i] &gt; max)
            max = diff[i];
    }

    corr = max - 1; //Max value is 1
    for(i : id_t)
        diff[i] = diff[i] - corr;
}

void jump_time_before()
{
    time_t maxt = -P+cycle/2+delta;

    for(i : id_t)
        maxt = max(maxt, local_time[i]);

    for(i : id_t)
        local_time[i] = local_time[i] - maxt - 1;
}

void jump_time_after()
{
    time_t maxt = -P+cycle/2+delta;

     for(i : id_t)
        maxt = max(maxt, local_time[i]);

    for(i : id_t)
        local_time[i] = local_time[i] + (cycle-maxt);
}

bool jump_before_allowed()
{
    return(forall(i : id_t) local_time[i] &lt; -1);
}

bool jump_after_allowed()
{
    return(
        (forall(i : id_t) local_time[i] &gt; 0) &amp;&amp;
        (exists(i : id_t) local_time[i] &lt;= delta+epsilon) &amp;&amp;
        (forall(i : id_t)
            forall(j : id_t) i != j imply !b[i][j]));
}</declaration>
	<template>
		<name x="5" y="5">Process</name>
		<parameter>const id_t id</parameter>
		<declaration>time_t SUM = 0;
bool FLAG;

clock t;

/*cycle_t calculate_local()
{
        cycle_t minval = cycle, maxval = 0;
        for(i : id_t)
                if(i != id)
                {
                        minval = min(minval, ARRbounded[i]);
                        maxval = max(maxval, ARRbounded[i]);
                }
        return local_time[id] + delta - (minval + maxval) / 2 - P; //Must be 0, increment diff
}*/</declaration>
		<location id="id0" x="240" y="64">
			<label kind="invariant" x="304" y="-16">t &lt;= xi &amp;&amp;
(!FLAG imply local_time[id] &lt;= 0) &amp;&amp;
(FLAG imply local_time[id] &lt;= cycle)</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="320" y="48">local_time[id] == cycle &amp;&amp; FLAG</label>
			<label kind="assignment" x="320" y="64">local_time[id] = local_time[id]+delta-SUM/2-P,
FLAG = false,
SUM = 0,
increment_diff(id)</label>
			<nail x="312" y="40"/>
			<nail x="312" y="104"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-72" y="48">local_time[id] == 0 &amp;&amp; !FLAG</label>
			<label kind="synchronisation" x="72" y="64">send[id]!</label>
			<label kind="assignment" x="48" y="80">FLAG = true</label>
			<nail x="152" y="48"/>
			<nail x="152" y="96"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="184" y="160">t &gt;= xi &amp;&amp;
(!FLAG imply (local_time[id] &lt; 0 &amp;&amp; not jump_before_allowed())) &amp;&amp;
(FLAG imply (local_time[id] &lt; cycle &amp;&amp; not jump_after_allowed()))</label>
			<label kind="assignment" x="184" y="208">local_time[id]++,
t = 0</label>
			<nail x="256" y="152"/>
			<nail x="192" y="152"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="216" y="-72">k : id_t</label>
			<label kind="synchronisation" x="192" y="-56">receive[id][k]?</label>
			<label kind="assignment" x="144" y="-40">SUM = SUM+local_time[id]</label>
			<nail x="208" y="-16"/>
			<nail x="272" y="-16"/>
		</transition>
	</template>
	<template>
		<name>Helper</name>
		<location id="id1" x="0" y="0">
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-88" y="64">jump_after_allowed()</label>
			<label kind="assignment" x="-88" y="80">jump_time_after()</label>
			<nail x="0" y="56"/>
			<nail x="-48" y="56"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-88" y="-96">jump_before_allowed()</label>
			<label kind="assignment" x="-88" y="-80">jump_time_before()</label>
			<nail x="0" y="-56"/>
			<nail x="48" y="-56"/>
		</transition>
	</template>
	<template>
		<name>Observer</name>
		<parameter>const time_t t</parameter>
		<declaration>clock c;</declaration>
		<location id="id2" x="0" y="-96">
			<name x="16" y="-120">finished</name>
		</location>
		<location id="id3" x="0" y="0">
			<name x="24" y="-16">processing</name>
			<label kind="invariant" x="24" y="0">c &lt;= t</label>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="16" y="-56">c == t</label>
		</transition>
	</template>
	<template>
		<name>Channel</name>
		<parameter>const id_t id</parameter>
		<declaration>clock t;

void reset_b()
{
    for(i : id_t)
        b[id][i] = true;
}</declaration>
		<location id="id4" x="264" y="-16">
			<name x="288" y="-32">sending</name>
			<label kind="invariant" x="288" y="-16">t &lt;= xi * (delta+epsilon)</label>
		</location>
		<location id="id5" x="264" y="96">
			<name x="280" y="80">idle</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="296" y="16">send[id]?</label>
			<label kind="assignment" x="296" y="32">t = 0,
reset_b()</label>
			<nail x="288" y="40"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-16" y="24">(t &lt;= xi * (delta+epsilon)) &amp;&amp;
forall(l : id_t) l != id imply !b[id][l]</label>
			<nail x="232" y="40"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="232" y="-184">l : id_t</label>
			<label kind="guard" x="232" y="-168">l != id &amp;&amp; b[id][l] &amp;&amp; t &gt;= xi * (delta-epsilon)</label>
			<label kind="synchronisation" x="232" y="-153">receive[l][id]!</label>
			<label kind="assignment" x="232" y="-138">b[id][l] = false</label>
			<nail x="224" y="-112"/>
			<nail x="296" y="-112"/>
		</transition>
	</template>
	<system>P0 = Process(0);
P1 = Process(1);
P2 = Process(2);

C0 = Channel(0);
C1 = Channel(1);
C2 = Channel(2);

//O = Observer(500);
H = Helper();

system P0, P1, P2, C0, C1, C2, H;</system>
</nta>
