<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>const int process_count = 3;

typedef int[0,process_count-1] id_t;
typedef int time_t;

const int n = process_count;

const time_t xi = 80;
const time_t delta = 2;
const time_t epsilon = 1;
const time_t P = 22;
const time_t beta = 6;
const time_t gamma = beta + epsilon + (7 * beta + 3 * delta + 7 * epsilon) / xi + 8 * (beta + delta + epsilon) / (xi * xi) + 4 * (beta + delta + epsilon) / (xi * xi * xi);

int[0,n-1] k, l;
chan send[n];
chan receive[n][n];

time_t local_time[n];
int diff;

time_t abs(time_t x)
{
    if(x &lt; 0)
       return -x;
    else
       return x;
}</declaration>
	<template>
		<name x="5" y="5">Process</name>
		<parameter>const id_t id</parameter>
		<declaration>time_t SUM;
bool FLAG;

clock t;</declaration>
		<location id="id0" x="280" y="64">
			<label kind="invariant" x="-168" y="48">t&lt;xi+1 &amp;&amp;
local_time[id] &lt;= ((1+xi)*(beta+delta+epsilon)/xi)*FLAG</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="360" y="-8">local_time[id] == (1+xi)*(beta+delta+epsilon)/xi &amp;&amp;
FLAG</label>
			<label kind="assignment" x="384" y="32">FLAG = false,
local_time[id] += delta-SUM/2-P,
SUM = 0,
diff = (diff+1)*(id == 0) + (diff-1)*(id == 1)+diff*(id&gt;1)</label>
			<nail x="376" y="24"/>
			<nail x="376" y="96"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-184" y="-16">local_time[id] == 0 &amp;&amp; !FLAG</label>
			<label kind="synchronisation" x="-256" y="40">send[id]!</label>
			<label kind="assignment" x="-184" y="96">FLAG = true</label>
			<nail x="-184" y="8"/>
			<nail x="-184" y="88"/>
			<nail x="216" y="88"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="120" y="248">t&gt;xi-1 &amp;&amp;
local_time[id] &lt; ((1+xi)*(beta+delta+epsilon)/xi)*FLAG</label>
			<label kind="assignment" x="120" y="280">local_time[id]++,
t = 0</label>
			<nail x="280" y="240"/>
			<nail x="168" y="240"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="120" y="-96">receive[id][k]?</label>
			<label kind="assignment" x="232" y="-96">SUM = SUM+local_time[id]</label>
			<nail x="160" y="-72"/>
			<nail x="392" y="-72"/>
		</transition>
	</template>
	<template>
		<name>Choice</name>
		<parameter>int[0, n-1] &amp;x</parameter>
		<location id="id1" x="0" y="0">
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="assignment" x="80" y="-8">x = (x+1)%n</label>
			<nail x="72" y="-40"/>
			<nail x="72" y="40"/>
		</transition>
	</template>
	<template>
		<name>Channel</name>
		<parameter>const id_t id</parameter>
		<declaration>clock t;
int[0, n] C; //Include n, because of iteration
bool b[n];</declaration>
		<location id="id2" x="264" y="-16">
			<label kind="invariant" x="288" y="-24">t &lt;= xi * (delta+epsilon)</label>
		</location>
		<location id="id3" x="96" y="184">
			<committed/>
		</location>
		<location id="id4" x="-72" y="-16">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-40" y="32">(t &lt;= xi * (delta+epsilon)) &amp;&amp; (C==0)</label>
			<nail x="104" y="24"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="112" y="-256">l != id &amp;&amp; b[l] &amp;&amp; t &gt;= xi * (delta-epsilon)</label>
			<label kind="synchronisation" x="112" y="-241">receive[l][id]!</label>
			<label kind="assignment" x="112" y="-226">C = C-1, b[l] = 0</label>
			<nail x="72" y="-136"/>
			<nail x="64" y="-200"/>
			<nail x="440" y="-200"/>
			<nail x="416" y="-120"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="240" y="72">C == n</label>
			<label kind="assignment" x="240" y="88">C = n-1</label>
			<nail x="208" y="104"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="80" y="264">C &lt; n</label>
			<label kind="assignment" x="72" y="280">b[C] = 1,
C=C+1</label>
			<nail x="144" y="256"/>
			<nail x="48" y="256"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-128" y="80">send[id]?</label>
			<label kind="assignment" x="-128" y="96">t = 0</label>
			<nail x="-48" y="96"/>
		</transition>
	</template>
	<system>CHk = Choice(k);
CHl = Choice(l);

system Process, Channel, CHk, CHl;</system>
</nta>
